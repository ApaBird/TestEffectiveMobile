/*
 * Онлайн библиотека песен
 *
 * тестовое задание
 *
 * API version: 0.0.1
 * Contact: apa.birds@mail.ru
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package server

import (
	"SongServer/postgres"
	"encoding/json"
	"net/http"
	"net/url"
)

func AddSong(w http.ResponseWriter, r *http.Request) {

	song := InfoAddSong{}
	if err := json.NewDecoder(r.Body).Decode(&song); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}

	if song.Group == "" || song.Song == "" {
		http.Error(w, "Validation exception", http.StatusUnprocessableEntity)
	}

	songInfo, err := RequestSong(song.Group, song.Song)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
	}

	db := postgres.NewConnectDB()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}

	id, err := db.AddSong(song.Song, song.Group, songInfo.Text, songInfo.Link, songInfo.ReleaseDate)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(id))
}

func DeleteSong(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetSong(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func SongList(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UpdateSong(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func RequestSong(group, song string) (*InfoSong, error) {
	address := GetEnv("URL", "https://loaclhost:8080")
	endpoint := GetEnv("INFO", "/info")

	parametrs := url.Values{}
	parametrs.Add("group", group)
	parametrs.Add("song", song)

	u := url.URL{
		Scheme:   "http",
		Host:     address,
		Path:     endpoint,
		RawQuery: parametrs.Encode(),
	}

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}

	songInfo := InfoSong{}

	if err := json.NewDecoder(resp.Body).Decode(&songInfo); err != nil {
		return nil, err
	}

	return &songInfo, nil
}
